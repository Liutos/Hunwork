(defpackage :hunwork
  (:use :cl :hunchentoot :cl-who)
  (:export :start-server		;Functions
	   :stop-server
	   :get-all-post-paras
	   :print-user-defined-dispatcher
	   :get-request-uri
	   :page-redirect
	   :define-regex-dispatcher	;Macros
	   :with-post-parameter
	   :with-login-let
	   :with-session-start))

(in-package :hunwork)

(let ((acceptor nil))
  (defun start-acceptor (&optional (port 8080) (log-p nil))
    (unless acceptor
      (setf acceptor (make-instance 'easy-acceptor
				    :port port
				    :access-log-destination log-p)))
    (start acceptor))
  (defun stop-acceptor ()
    (stop acceptor)
    (setf acceptor nil)))

(defun start-server (&optional (port 8080) (log-p nil))
  (setf *default-content-type* "text/html; charset=utf-8")
  (setf *hunchentoot-default-external-format*
	(flex:make-external-format :utf-8 :eol-style :lf))
  (setf *show-lisp-errors-p* t)
  (start-acceptor port log-p))

(defun stop-server ()
  (stop-acceptor))

(let ((hs (make-hash-table)))
  (defun add-regex-dispatcher (regex handler)
    "Bind the regex url REGEX to the HANDLER. If the HANDLER has been registered but the REGEX is different with the old one, bind the new REGEX to the HANDLER, too."
    (multiple-value-bind (v f)
	(gethash handler hs)
      (when (or (null f)
		(string/= v regex))
	(setf (gethash handler hs) regex)
	(push (create-regex-dispatcher regex handler)
	      *dispatch-table*))))
  (defun print-user-defined-dispatcher ()
    "Print all the user-defined regex-dispatcher by means of function ADD-REGEX-DISPATCHER."
    (maphash #'(lambda (k v)
		 (format t "~A: ~A~%" k v))
	     hs)))

(defun convert-fn-name->url (fn-name)
  "Convert the FN-NAME to a legal URL for a web page."
  (with-output-to-string (stream)
    (princ "^/" stream)
    (dotimes (i (length fn-name))
      (if (member (char fn-name i) '(#\- #\.) :test #'char=)
	  (princ #\\ stream))
      (princ (char fn-name i) stream))
    (princ "\\.html$" stream)))

(defmacro define-regex-dispatcher (name regex &body body)
  "Define the regex-dispatcher conveniently and register it automatically. If the REGEX is NIL, then the URL for the disposed web page is generated by a function named CONVERT-FN-NAME->URL. If the REGEX is a list of regular expression, set the function NAME as the dispatcher for each one."
  `(progn
     (defun ,name ()
       ,@body)
     ,(cond ((null regex)
	     `(add-regex-dispatcher ,(convert-fn-name->url
				      (format nil "~(~A~)" name)) ',name))
	    ((consp regex)
	     `(mapcar #'(lambda (re)
			  (add-regex-dispatcher re ',name))
		      ',regex))
	    (t `(add-regex-dispatcher ,regex ',name)))
     t))

(defun get-all-post-paras ()
  (post-parameters*))

(defmacro with-post-parameter (vars &body body)
  "Bind the variables in the VARS for the corresponding values of the post parameters attached to the same symbol as each variable. After binding, evaluate the expression in BODY."
  `(let ,(mapcar #'(lambda (var)
		     `(,var (post-parameter ,(format nil "~(~A~)" var))))
		 vars)
     ,@body))

(defun get-request-uri ()
  (request-uri*))

(defmacro with-login-let (vars &body body)
  "Ensure the HTTP request is send from a authenticated user by checking whether the symbol *session* has been bound. If bound, get some values from the session and bind them to the variables with same name. If not bound, the user will be guided to the index page."
  `(cond ((boundp '*session*)
	  (let ,(mapcar #'(lambda (var)
			    `(,var (session-value ',var)))
			vars)
	    ,@body))
	 (t
	  (with-html-output-to-string (*standard-output*)
	    (:html
	     (:body
	      (:p "You must login at first. Please go to the index page for login.")
	      (:a :href "/index.html"
		  "Click here to return")))))))

(defmacro with-session-start (session-values &body body)
  "Use Hunchentoot's START-SESSION function for using the session in communication. The tuple in argument SESSION-VALUES contains the symbol would be set in session and the corresponding value. Then evaluate the expression in BODY."
  `(progn
     (start-session)
     (setf ,@(mapcan #'(lambda (binding)
			 (destructuring-bind (symbol value) binding
			   `((session-value ',symbol) ,value)))
		     session-values))
     ,@body))

(defun page-redirect (url)
  (redirect url))